// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package storagemock is a generated GoMock package.
package storagemock

import (
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockMetricsStorage is a mock of MetricsStorage interface.
type MockMetricsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsStorageMockRecorder
}

// MockMetricsStorageMockRecorder is the mock recorder for MockMetricsStorage.
type MockMetricsStorageMockRecorder struct {
	mock *MockMetricsStorage
}

// NewMockMetricsStorage creates a new mock instance.
func NewMockMetricsStorage(ctrl *gomock.Controller) *MockMetricsStorage {
	mock := &MockMetricsStorage{ctrl: ctrl}
	mock.recorder = &MockMetricsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsStorage) EXPECT() *MockMetricsStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMetricsStorage) Close(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", ctx)
}

// Close indicates an expected call of Close.
func (mr *MockMetricsStorageMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMetricsStorage)(nil).Close), ctx)
}

// MetricsHTTPHandler mocks base method.
func (m *MockMetricsStorage) MetricsHTTPHandler() http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricsHTTPHandler")
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// MetricsHTTPHandler indicates an expected call of MetricsHTTPHandler.
func (mr *MockMetricsStorageMockRecorder) MetricsHTTPHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricsHTTPHandler", reflect.TypeOf((*MockMetricsStorage)(nil).MetricsHTTPHandler))
}

// StoreNetworkPerformance mocks base method.
func (m *MockMetricsStorage) StoreNetworkPerformance(ctx context.Context, timestamp time.Time, downloadSpeedMbps, uploadSpeedMbps float64, pingMs int64, serverName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreNetworkPerformance", ctx, timestamp, downloadSpeedMbps, uploadSpeedMbps, pingMs, serverName)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreNetworkPerformance indicates an expected call of StoreNetworkPerformance.
func (mr *MockMetricsStorageMockRecorder) StoreNetworkPerformance(ctx, timestamp, downloadSpeedMbps, uploadSpeedMbps, pingMs, serverName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreNetworkPerformance", reflect.TypeOf((*MockMetricsStorage)(nil).StoreNetworkPerformance), ctx, timestamp, downloadSpeedMbps, uploadSpeedMbps, pingMs, serverName)
}

// StorePingResult mocks base method.
func (m *MockMetricsStorage) StorePingResult(ctx context.Context, timestamp time.Time, pingMs int64, serverName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePingResult", ctx, timestamp, pingMs, serverName)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorePingResult indicates an expected call of StorePingResult.
func (mr *MockMetricsStorageMockRecorder) StorePingResult(ctx, timestamp, pingMs, serverName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePingResult", reflect.TypeOf((*MockMetricsStorage)(nil).StorePingResult), ctx, timestamp, pingMs, serverName)
}
